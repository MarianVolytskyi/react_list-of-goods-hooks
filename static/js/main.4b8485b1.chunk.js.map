{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getSortedGoods","className","type","onClick","cn","prevValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOcS,CACnBnB,EAAiB,CAAEI,WAAUE,eAG/B,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMjB,EAAYN,EAASe,WACpCM,UAAWG,IAAG,iBAAkB,CAC9B,WAAYnB,IAAaL,EAASe,WAJtC,iCAUA,wBACEO,KAAK,SACLC,QAAS,kBAAMjB,EAAYN,EAASiB,SACpCI,UAAWG,IAAG,oBAAqB,CACjC,WAAYnB,IAAaL,EAASiB,SAJtC,4BAUA,wBACEK,KAAK,SACLC,QAAS,kBAAMf,GAAc,SAAAiB,GAAS,OAAKA,MAC3CJ,UAAWG,IAAG,oBAAqB,CACjC,YAAajB,IAJjB,sBAUEF,GAAYE,IACZ,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPjB,EAAYN,EAASI,SACrBI,GAAc,IALlB,sBAaJ,6BAEIC,EAAaiB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YChHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4b8485b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n  DEFAULT = '',\n}\n\ninterface FilterParams {\n  sortType: SortType;\n  isReversed: boolean;\n}\n\nfunction getSortedGoods(\n  goods: string[],\n  { sortType, isReversed }:FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.DEFAULT);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods = getSortedGoods(\n    goodsFromServer, { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.ALPHABET)}\n          className={cn('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.LENGTH)}\n          className={cn('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(prevValue => !prevValue)}\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.DEFAULT);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}